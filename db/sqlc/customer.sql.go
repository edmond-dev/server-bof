// Code generated by sqlc. DO NOT EDIT.
// source: customer.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :execresult
INSERT INTO customers (
  customer_id, first_name, last_name, email, password
) VALUES (
       ?, ?, ?, ?, ?
 )
`

type CreateCustomerParams struct {
	CustomerID string `json:"customerID"`
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Email      string `json:"email"`
	Password   string `json:"password"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCustomer,
		arg.CustomerID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE customer_id = ?
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID string) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, customerID)
	return err
}

const getCustomerOrderDetailsAndAddr = `-- name: GetCustomerOrderDetailsAndAddr :one
SELECT order_number, c.customer_id, product_id, order_category_name,
       quantity_ordered, price_each, ordered_date,
       customer_comments,
       created_at, address_customer_id, street,
       address_line_1, address_line_2, phone, city, state, zip_code

FROM orders o
join customers c on c.customer_id = o.customer_id
join address a on c.customer_id = a.address_customer_id
WHERE c.customer_id = ?
`

type GetCustomerOrderDetailsAndAddrRow struct {
	OrderNumber       string    `json:"orderNumber"`
	CustomerID        string    `json:"customerID"`
	ProductID         string    `json:"productID"`
	OrderCategoryName string    `json:"orderCategoryName"`
	QuantityOrdered   int32     `json:"quantityOrdered"`
	PriceEach         int32     `json:"priceEach"`
	OrderedDate       time.Time `json:"orderedDate"`
	CustomerComments  string    `json:"customerComments"`
	CreatedAt         time.Time `json:"createdAt"`
	AddressCustomerID string    `json:"addressCustomerID"`
	Street            string    `json:"street"`
	AddressLine1      string    `json:"addressLine1"`
	AddressLine2      string    `json:"addressLine2"`
	Phone             string    `json:"phone"`
	City              string    `json:"city"`
	State             string    `json:"state"`
	ZipCode           string    `json:"zipCode"`
}

func (q *Queries) GetCustomerOrderDetailsAndAddr(ctx context.Context, customerID string) (GetCustomerOrderDetailsAndAddrRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerOrderDetailsAndAddr, customerID)
	var i GetCustomerOrderDetailsAndAddrRow
	err := row.Scan(
		&i.OrderNumber,
		&i.CustomerID,
		&i.ProductID,
		&i.OrderCategoryName,
		&i.QuantityOrdered,
		&i.PriceEach,
		&i.OrderedDate,
		&i.CustomerComments,
		&i.CreatedAt,
		&i.AddressCustomerID,
		&i.Street,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Phone,
		&i.City,
		&i.State,
		&i.ZipCode,
	)
	return i, err
}

const getCustomerWithEmail = `-- name: GetCustomerWithEmail :one
SELECT customer_id, first_name, last_name, email, password, created_at FROM customers
WHERE email = ? LIMIT 1
`

func (q *Queries) GetCustomerWithEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerWithEmail, email)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerWithId = `-- name: GetCustomerWithId :one
SELECT customer_id, first_name, last_name, email, password, created_at FROM customers
WHERE customer_id = ? LIMIT 1
`

func (q *Queries) GetCustomerWithId(ctx context.Context, customerID string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerWithId, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET first_name = ?, last_name = ?, email = ?

WHERE customer_id = ?
`

type UpdateCustomerParams struct {
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Email      string `json:"email"`
	CustomerID string `json:"customerID"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.CustomerID,
	)
	return err
}
