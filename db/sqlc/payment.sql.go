// Code generated by sqlc. DO NOT EDIT.
// source: payment.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createOrderPayment = `-- name: CreateOrderPayment :execresult
INSERT INTO payment (
    customer_id, payment_date, payment_method_id, amount
) VALUES (
     ?, ?, ?, ?
)
`

type CreateOrderPaymentParams struct {
	CustomerID      string    `json:"customerID"`
	PaymentDate     time.Time `json:"paymentDate"`
	PaymentMethodID string    `json:"paymentMethodID"`
	Amount          int64     `json:"amount"`
}

func (q *Queries) CreateOrderPayment(ctx context.Context, arg CreateOrderPaymentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrderPayment,
		arg.CustomerID,
		arg.PaymentDate,
		arg.PaymentMethodID,
		arg.Amount,
	)
}

const getPayment = `-- name: GetPayment :one
SELECT customer_id, payment_date, payment_method_id, amount FROM payment
WHERE customer_id = ?
ORDER BY  customer_id
`

func (q *Queries) GetPayment(ctx context.Context, customerID string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, customerID)
	var i Payment
	err := row.Scan(
		&i.CustomerID,
		&i.PaymentDate,
		&i.PaymentMethodID,
		&i.Amount,
	)
	return i, err
}
