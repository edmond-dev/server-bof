// Code generated by sqlc. DO NOT EDIT.
// source: admin.sql

package db

import (
	"context"
)

const getProductStatsPerCategory = `-- name: GetProductStatsPerCategory :one
SELECT c.category_name,
       COUNT(*) AS TotalProductsPerCategory
FROM categories c
INNER JOIN products p on c.category_id = p.category_id
WHERE c.category_id  = ?
GROUP BY c.category_name
`

type GetProductStatsPerCategoryRow struct {
	CategoryName             string `json:"categoryName"`
	TotalProductsPerCategory int64  `json:"TotalProductsPerCategory"`
}

func (q *Queries) GetProductStatsPerCategory(ctx context.Context, categoryID string) (GetProductStatsPerCategoryRow, error) {
	row := q.db.QueryRowContext(ctx, getProductStatsPerCategory, categoryID)
	var i GetProductStatsPerCategoryRow
	err := row.Scan(&i.CategoryName, &i.TotalProductsPerCategory)
	return i, err
}

const getTotalCustomers = `-- name: GetTotalCustomers :one
SELECT customer_id, COUNT(*) AS TotalNumberOfCustomers
FROM customers
GROUP BY customer_id
`

type GetTotalCustomersRow struct {
	CustomerID             string `json:"customerID"`
	TotalNumberOfCustomers int64  `json:"TotalNumberOfCustomers"`
}

func (q *Queries) GetTotalCustomers(ctx context.Context) (GetTotalCustomersRow, error) {
	row := q.db.QueryRowContext(ctx, getTotalCustomers)
	var i GetTotalCustomersRow
	err := row.Scan(&i.CustomerID, &i.TotalNumberOfCustomers)
	return i, err
}

const getTotalRevenue = `-- name: GetTotalRevenue :one
SELECT p.amount, SUM(p.amount) AS totalRevenue
FROM payment p
GROUP BY amount
`

type GetTotalRevenueRow struct {
	Amount       int64       `json:"amount"`
	TotalRevenue interface{} `json:"totalRevenue"`
}

func (q *Queries) GetTotalRevenue(ctx context.Context) (GetTotalRevenueRow, error) {
	row := q.db.QueryRowContext(ctx, getTotalRevenue)
	var i GetTotalRevenueRow
	err := row.Scan(&i.Amount, &i.TotalRevenue)
	return i, err
}

const productsAvailable = `-- name: ProductsAvailable :one
SELECT product_name, COUNT(*) AS TotalProductsAvailable FROM products
GROUP BY product_name
`

type ProductsAvailableRow struct {
	ProductName            string `json:"productName"`
	TotalProductsAvailable int64  `json:"TotalProductsAvailable"`
}

func (q *Queries) ProductsAvailable(ctx context.Context) (ProductsAvailableRow, error) {
	row := q.db.QueryRowContext(ctx, productsAvailable)
	var i ProductsAvailableRow
	err := row.Scan(&i.ProductName, &i.TotalProductsAvailable)
	return i, err
}

const totalAmountOfOrdersByACustomer = `-- name: TotalAmountOfOrdersByACustomer :one
SELECT customer_id, sum(quantity_ordered * orders.price_each) AS CutomerTotal
FROM orders
INNER JOIN orderDetails oD on orders.order_number = oD.order_number
GROUP BY customer_id
`

type TotalAmountOfOrdersByACustomerRow struct {
	CustomerID   string      `json:"customerID"`
	CutomerTotal interface{} `json:"CutomerTotal"`
}

func (q *Queries) TotalAmountOfOrdersByACustomer(ctx context.Context) (TotalAmountOfOrdersByACustomerRow, error) {
	row := q.db.QueryRowContext(ctx, totalAmountOfOrdersByACustomer)
	var i TotalAmountOfOrdersByACustomerRow
	err := row.Scan(&i.CustomerID, &i.CutomerTotal)
	return i, err
}
