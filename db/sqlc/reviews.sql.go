// Code generated by sqlc. DO NOT EDIT.
// source: reviews.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createReview = `-- name: CreateReview :execresult
INSERT INTO reviews (
   review_id, product_review_id, customer_review_id, review
) VALUES (
     ?, ?, ?, ?
 )
`

type CreateReviewParams struct {
	ReviewID         string `json:"reviewID"`
	ProductReviewID  string `json:"productReviewID"`
	CustomerReviewID string `json:"customerReviewID"`
	Review           string `json:"review"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReview,
		arg.ReviewID,
		arg.ProductReviewID,
		arg.CustomerReviewID,
		arg.Review,
	)
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE review_id = ?
`

func (q *Queries) DeleteReview(ctx context.Context, reviewID string) error {
	_, err := q.db.ExecContext(ctx, deleteReview, reviewID)
	return err
}

const getProductReviews = `-- name: GetProductReviews :one
SELECT r.review_id, r.product_review_id, r.customer_review_id, r.review, r.created_at, c.customer_id, c.first_name, c.last_name, c.email, c.role, c.password, c.created_at FROM reviews r
LEFT JOIN products p on p.product_id = r.product_review_id
LEFT JOIN customers c on c.customer_id = r.customer_review_id
WHERE review_id = ?
LIMIT 1
`

type GetProductReviewsRow struct {
	ReviewID         string    `json:"reviewID"`
	ProductReviewID  string    `json:"productReviewID"`
	CustomerReviewID string    `json:"customerReviewID"`
	Review           string    `json:"review"`
	CreatedAt        time.Time `json:"createdAt"`
	CustomerID       string    `json:"customerID"`
	FirstName        string    `json:"firstName"`
	LastName         string    `json:"lastName"`
	Email            string    `json:"email"`
	Role             string    `json:"role"`
	Password         string    `json:"password"`
	CreatedAt_2      time.Time `json:"createdAt2"`
}

func (q *Queries) GetProductReviews(ctx context.Context, reviewID string) (GetProductReviewsRow, error) {
	row := q.db.QueryRowContext(ctx, getProductReviews, reviewID)
	var i GetProductReviewsRow
	err := row.Scan(
		&i.ReviewID,
		&i.ProductReviewID,
		&i.CustomerReviewID,
		&i.Review,
		&i.CreatedAt,
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Role,
		&i.Password,
		&i.CreatedAt_2,
	)
	return i, err
}

const getReview = `-- name: GetReview :one
SELECT review_id, product_review_id, customer_review_id, review, created_at FROM reviews
WHERE review_id = ?
ORDER BY review_id
`

func (q *Queries) GetReview(ctx context.Context, reviewID string) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, reviewID)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.ProductReviewID,
		&i.CustomerReviewID,
		&i.Review,
		&i.CreatedAt,
	)
	return i, err
}

const updateReview = `-- name: UpdateReview :exec
UPDATE reviews
SET review = ?
WHERE review_id = ?
`

type UpdateReviewParams struct {
	Review   string `json:"review"`
	ReviewID string `json:"reviewID"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) error {
	_, err := q.db.ExecContext(ctx, updateReview, arg.Review, arg.ReviewID)
	return err
}
