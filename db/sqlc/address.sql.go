// Code generated by sqlc. DO NOT EDIT.
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :execresult
INSERT INTO address(
    address_customer_id,
    email,
    street,
    address_line_1,
    address_line_2,
    phone, city, state, zip_code
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateAddressParams struct {
	AddressCustomerID string `json:"addressCustomerID"`
	Email             string `json:"email"`
	Street            string `json:"street"`
	AddressLine1      string `json:"addressLine1"`
	AddressLine2      string `json:"addressLine2"`
	Phone             string `json:"phone"`
	City              string `json:"city"`
	State             string `json:"state"`
	ZipCode           string `json:"zipCode"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAddress,
		arg.AddressCustomerID,
		arg.Email,
		arg.Street,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Phone,
		arg.City,
		arg.State,
		arg.ZipCode,
	)
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM address
WHERE address_customer_id = ?
`

func (q *Queries) DeleteAddress(ctx context.Context, addressCustomerID string) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, addressCustomerID)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT address_customer_id, email, street, address_line_1, address_line_2, phone, city, state, zip_code FROM address
WHERE address_customer_id = ?
ORDER BY address_customer_id
LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, addressCustomerID string) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddress, addressCustomerID)
	var i Address
	err := row.Scan(
		&i.AddressCustomerID,
		&i.Email,
		&i.Street,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.Phone,
		&i.City,
		&i.State,
		&i.ZipCode,
	)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE address
SET email = ?,
    street = ?,
    address_line_1 = ?,
    address_line_2 = ?,
    phone = ?,
    city = ?,
    state = ?,
    zip_code = ?
WHERE address_customer_id = ?
`

type UpdateAddressParams struct {
	Email             string `json:"email"`
	Street            string `json:"street"`
	AddressLine1      string `json:"addressLine1"`
	AddressLine2      string `json:"addressLine2"`
	Phone             string `json:"phone"`
	City              string `json:"city"`
	State             string `json:"state"`
	ZipCode           string `json:"zipCode"`
	AddressCustomerID string `json:"addressCustomerID"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.Email,
		arg.Street,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.Phone,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.AddressCustomerID,
	)
	return err
}
